#!/bin/sh -e

RED="\033[0;31m"	
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
CYAN="\033[0;36m"
RC="\033[0m"

# region defaults (change to your preference)
KEYMAP="br-abnt2"
MIRROR="Brazil"
TIMEZONE="America/Sao_Paulo"

root_user_check() {
    if [ "$(id -u)" -ne 0 ]; then
        printf "%b\n" "${RED}You must run this as root.${RC}"
        exit 1
    fi
}

boot_mode_check() {
    if [ "$(cat /sys/firmware/efi/fw_platform_size)" != "64" ]; then
        printf "%b\n" "${RED}A 64-bit UEFI system is required.${RC}"
        exit 1
    fi
}

disk_check() {
    if [ -z "$1" ]; then
        printf "%b\n" "${RED}No disk specified.${RC}"
        exit 1
    elif [ ! -b "$1" ]; then
        printf "%b\n" "${RED}$1 is not a valid device.${RC}"
        exit 1
    else
        DISK=$1
    fi
}

set_console() {
    clear
    loadkeys ${KEYMAP}
    setfont ter-v18b
}

user_information_prompt() {
    while :; do
        printf "%b " "${CYAN}Enter your username:${RC}"
        read -r username
        username=$(printf "%s" "$username" | xargs | tr "[:upper:]" "[:lower:]")
        if [ "$username" != "root" ] && printf "%s" "$username" | grep -Eq "^[a-z][-a-z0-9_]*\$"; then
            USER="$username"
            break
        else
            printf "%b\n" "${RED}Invalid username.${RC}"
        fi
    done

    while :; do
        printf "%b " "${CYAN}Enter your password:${RC}"
        stty -echo
        read -r password
        stty echo

        printf "\n%b " "${CYAN}Verify your password:${RC}"
        stty -echo
        read -r verify
        stty echo

        if [ "$password" != "$verify" ]; then
            printf "\n%b\n" "${RED}Passwords do not match.${RC}"
        elif [ "$password" = "$verify" ] && [ -n "$password" ]; then
            PASSWORD="$password"
            break
        else
            printf "\n%b\n" "${RED}Invalid password.${RC}"
        fi  
    done

    while :; do
        printf "\n%b " "${CYAN}Name your machine:${RC}"
        read -r hostname
        hostname=$(printf "%s" "$hostname" | xargs | tr "[:upper:]" "[:lower:]")
        if printf "%s" "$hostname" | grep -Eq "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])$"; then
            HOSTNAME="$hostname"
            break
        else
            printf "%b" "${RED}Invalid hostname.${RC}"
        fi
    done
}

disk_format() {
    printf "%b\n" "${YELLOW}Formatting disk...${RC}"
    umount -R /mnt || true
    sgdisk -Z "${DISK}"
    sgdisk -a 2048 "${DISK}"

    sgdisk -n 1::+1G -t=1:ef00 -c=1:"EFI" "${DISK}"
    sgdisk -n 2::-0 -t=2:8300 -c=2:"ROOT" "${DISK}"

    partprobe "${DISK}"

    case "${DISK}" in
        *nvme*)
            P1="${DISK}p1"
            P2="${DISK}p2"
            ;;
        *)
            P1="${DISK}1"
            P2="${DISK}2"
            ;;
    esac

    mkfs.fat -F 32 -n "EFI" "${P1}"
    mkfs.ext4 -F -L "ROOT" "${P2}"

    mount "${P2}" /mnt
    mount --mkdir "${P1}" /mnt/boot
}

refresh_mirrors() {
    printf "%b\n" "${YELLOW}Updating pacman mirrors...${RC}"
    reflector --country "${MIRROR}" --latest 5 --protocol https --save /etc/pacman.d/mirrorlist
}

system_install() {
    printf "%b\n" "${YELLOW}Installing system...${RC}"
    if [ "$(systemd-detect-virt)" = "none" ]; then
        pacstrap -K /mnt base linux-lts linux-firmware
    else
        pacstrap -K /mnt base linux-lts
    fi
}

system_configure() {
    genfstab -U /mnt >> /mnt/etc/fstab
    arch-chroot /mnt /bin/bash << EOF

    printf "%b\n" "${YELLOW}Configuring timezone...${RC}"
    ln -sf /usr/share/zoneinfo/${TIMEZONE} /etc/localtime
    hwclock --systohc

    printf "%b\n" "${YELLOW}Setting language to pt-BR...${RC}"
    sed -i 's/^#pt_BR.UTF-8 UTF-8/pt_BR.UTF-8 UTF-8/' /etc/locale.gen
    locale-gen
    printf "%b\n" "LANG=pt_BR.UTF-8" > /etc/locale.conf

    printf "%b\n" "${YELLOW}Configuring keyboard layout...${RC}"
    printf "%b%s\n" "KEYMAP=" "${KEYMAP}" > /etc/vconsole.conf

    printf "%b\n" "${YELLOW}Configuring machine name...${RC}"
    printf "%s\n" "${HOSTNAME}" > /etc/hostname

    printf "%b\n" "${YELLOW}Installing network manager...${RC}"
    pacman -S --noconfirm --needed networkmanager
    systemctl enable NetworkManager

    printf "%b\n" "${YELLOW}Creating user...${RC}"
    pacman -S --noconfirm --needed sudo
    useradd -m -G wheel -s /bin/bash ${USER}
    printf "%s:%s\n" "${USER}" "${PASSWORD}" | chpasswd
    sed -i 's/^# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' /etc/sudoers

    printf "%b\n" "${YELLOW}Installing grub...${RC}"
    pacman -S --noconfirm --needed grub efibootmgr
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    grub-mkconfig -o /boot/grub/grub.cfg

EOF
}

root_user_check
boot_mode_check
disk_check "$1"
set_console
user_information_prompt
clear
disk_format
refresh_mirrors
system_install
system_configure
clear

printf "%b\n" "${YELLOW}Rebooting system in 5 seconds...${RC}"
sleep 1
printf "%b\n" "${YELLOW}Rebooting system in 4 seconds...${RC}"
sleep 1
printf "%b\n" "${YELLOW}Rebooting system in 3 seconds...${RC}"
sleep 1
printf "%b\n" "${YELLOW}Rebooting system in 2 seconds...${RC}"
sleep 1
printf "%b\n" "${YELLOW}Rebooting system in 1 second...${RC}"
sleep 1
systemctl reboot
